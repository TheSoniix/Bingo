/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Bingo;

import Bingo.Engine.BingoImpl;
import Bingo.Engine.Models.Field;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;

public class AppTest {

    BingoImpl engine = new BingoImpl();

    @Test
    public void testGameOverBeforeGameStart() {
        String msg = "The game is already over before the game starts!";
        assertFalse(msg, engine.isGameOver());
    }

    @Test
    public void testNotPulledBalls() {
        String msg = "The size of this list should be 75!";
        assertEquals(msg, engine.notPulledBalls().size(), 75);
    }

    @Test
    public void testPulledBalls() {
        String msg = "The size of this list should be 0!";
        assertEquals(msg, 0, engine.pulledBalls().size());
    }

    @Test
    public void checkPlayerOneCardValues() {
        String msg = "Values are wrong!";
        this.checkValues(engine.pOneCard(), msg);
    }


    @Test
    public void checkPlayerTwoCardValues() {
        String msg = "Values are wrong!";
        this.checkValues(engine.pTwoCard(), msg);
    }

    public void checkValues(List<Field> tempList, String msg) {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                int currValue = tempList.get((i * 5) + j).getValue();
                assertTrue(msg, currValue > (i * 15) && currValue <= (i * 15) + 15);
            }
        }
    }


    @Test
    public void checkBallsValue() {
        String msg = "Value of some balls are out of range!";
        int currValue;
        int checkValue;
        for (int i = 0; i < engine.notPulledBalls().size(); i++) {
            checkValue = engine.notPulledBalls().get(i);
            for (int j = 0; j < engine.notPulledBalls().size(); j++) {
                currValue = engine.notPulledBalls().get(j);
                assertFalse(msg,currValue < 0 || currValue > 75 );
                if (i != j) {
                    msg = "Value of some balls are equal!";
                    assertNotEquals(msg, checkValue, currValue);
                }
            }
        }
    }


    @Test
    public void addBallInPulledBalls() {
        engine.pullBall();
        String msg = "Pulled ball is not added in list of drawn balls!";
        assertEquals(msg, 1, engine.pulledBalls().size());
    }

    @Test
    public void removeBallFromPulledBalls() {
        engine.pullBall();
        String msg = "Pulled balls is not removed from not drawn List!";
        assertEquals(msg, 74, engine.notPulledBalls().size());
    }

    @Test
    public void checkValueOfPulledBall() {
        String msg = "The number of the current drawn ball was not pushed correctly into the list of drawn balls!";
        int currBall = engine.pullBall();
        int inPulledBalls = engine.pulledBalls().get(0);
        assertEquals(msg, currBall, inPulledBalls);
    }

    @Test
    public void checkValueOfNotPulledBall() {
        String msg = "The number of the drawn ball still exist in the list of not drawn balls!";
        int currBall = engine.pullBall();
        assertFalse(msg, engine.notPulledBalls().contains(currBall));
    }

    @Test
    public void drawMoreBallsThenExist() {
        String msg = "It is possible to draw more then 75 balls!";
        boolean test = true;
        this.pullAllBalls();
        try {
            engine.pullBall();
        } catch (AssertionError error) {
            System.out.println(error.getMessage());
            test = false;
        }
        assertFalse(msg, test);
    }

    @Test
    public void playerOneFieldsAreUnmarked() {
        String msg = "Fields should not be marked!";
        engine.pOneCard().forEach(field -> assertFalse(msg, field.isMarked()));
    }

    @Test
    public void playerTwoFieldsAreUnmarked() {
        String msg = "Fields should not be marked!";
        engine.pTwoCard().forEach(field -> assertFalse(msg, field.isMarked()));
    }

    @Test
    public void checkMarkFieldPlayerOne() {
        this.pullAllBalls();
        engine.pOneMarkField(1);
        String msg = "It is not possible to mark a field!";
        assertTrue(msg, engine.pOneCard().get(1).isMarked());
    }

    @Test
    public void checkMarkFieldPlayerTwo() {
        this.pullAllBalls();
        engine.pTwoMarkField(1);
        String msg = "It is not possible to mark a field!";
        assertTrue(msg, engine.pTwoCard().get(1).isMarked());
    }

    @Test
    public void checkMarkFieldWithWrongIndexPlayerOne() {
        boolean works;
        String msg = "To mark a field with a wrong index was accepted!";
        try {
            engine.pOneMarkField(200);
            works = true;
        } catch (AssertionError e) {
            works = false;
        }
        assertFalse(msg, works);
    }

    @Test
    public void checkMarkFieldWithWrongIndexPlayerTwo() {
        String msg = "To mark a field with a wrong index was accepted!";
        boolean works;
        try {
            engine.pTwoMarkField(200);
            works = true;
        } catch (AssertionError e) {
            works = false;
        }
        assertFalse(msg, works);
    }


    @Test
    public void gameOverAfterWinPlayerOne() {
        this.pullAllBalls();
        String msg = "The game should be game over!";
        engine.pOneCard().stream().limit(5).map(Field::getIndex).forEach(index -> engine.pOneMarkField(index));
        assertTrue(msg, engine.isGameOver());
    }

    @Test
    public void gameOverAfterWinPlayerTwo() {
        this.pullAllBalls();
        String msg = "The game should be game over!";
        engine.pTwoCard().stream().limit(5).map(Field::getIndex).forEach(index -> engine.pTwoMarkField(index));
        assertTrue(msg, engine.isGameOver());
    }


    @Test
    public void testNewGamePulledBalls() {
        String msg = "Balls did no reset!";
        this.pullAllBalls();
        List<Integer> oldBallList = engine.pulledBalls();
        engine.newGame();
        List<Integer> newBallList = engine.pulledBalls();
        assertNotEquals(msg, oldBallList, newBallList);
    }

    @Test
    public void testNewGamePlayerOneCard() {
        String msg = "Card did no reset!";
        List<Field> oldPlayerList = engine.pOneCard();
        engine.newGame();
        List<Field> newPlayerList = engine.pOneCard();
        assertNotEquals(msg, oldPlayerList, newPlayerList);
    }

    @Test
    public void testNewGamePlayerTwoCard() {
        String msg = "Card did no reset!";
        List<Field> oldPlayerTwoList = engine.pTwoCard();
        engine.newGame();
        List<Field> newPlayerTwoList = engine.pTwoCard();
        assertNotEquals(msg, oldPlayerTwoList, newPlayerTwoList);
    }

    @Test
    public void winConditionsHorizontal() {
        String msg = "Horizontal winning conditions do not work!";
        for (int i = 0; i < 5; i++) {
            this.pullAllBalls();
            for (int j = 0; j < 5; j++) {
                engine.pOneMarkField((j * 5) + i);
            }
            assertTrue(msg, engine.isGameOver());
            engine.newGame();
        }
    }

    @Test
    public void winConditionsVertical() {
        String msg = "Vertical winning conditions do not work!";
        for (int i = 0; i < 5; i++) {
            this.pullAllBalls();
            for (int j = 0; j < 5; j++) {
                engine.pOneMarkField(j + (i * 5));
            }
            assertTrue(msg, engine.isGameOver());
            engine.newGame();
        }
    }

    @Test
    public void winConditionsDiagonal() {
        String msg = "Diagonal winning conditions do not work!";
        List<Integer> diaOne = List.of(0, 6, 12, 18, 24);
        List<Integer> diaTwo = List.of(4, 8, 12, 16, 20);

        this.pullAllBalls();
        diaOne.forEach(i -> engine.pOneMarkField(i));
        assertTrue(engine.isGameOver());
        engine.newGame();
        this.pullAllBalls();
        diaTwo.forEach(i -> engine.pOneMarkField(i));
        assertTrue(msg, engine.isGameOver());

    }

    private void pullAllBalls() {
        for (int i = 0; i < 75; i++) {
            engine.pullBall();
        }
    }

    @Test
    public void manipulateCard() {
        String msg = "Card in engine is mutable!";
        engine.newGame();
        List<Field> list = engine.pOneCard();
        this.pullAllBalls();
        list.forEach(Field::setMark);
        engine.pOneMarkField(2);
        assertFalse(msg, engine.isGameOver());
    }
}
